// –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ useConnectionStore ‚Äî –≤–∏–∑—É–∞–ª—å–Ω—ã–π playground

import { type Meta, type StoryObj } from '@storybook/react';
import { Button, Divider, message,Space, Tag, Typography } from 'antd';
import { useEffect } from 'react';
import * as React from 'react';

import log from '@/log';
import {
    type ConnectionPhase,
    ConnectionPhases,
    PhaseStatuses,
    useConnectionStore,
} from '@/stores/useConnectionStore';

const { Title, Text } = Typography;

const DevConnectionStorePanel: React.FC = () => {
    const {
        currentPhase,
        phaseStatuses,
        phaseTimestamps,
        firstTimeConnection,
        lastSuccessfulConnection,
        firstStart,
        reStart,
        goOn,
        goFail,
        cancel,
        resetStatuses,
        fullReset,
    } = useConnectionStore();

    useEffect(() => {
        fullReset();
        log.debug('Storybook: –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
    }, [fullReset]);

    const renderPhase = (phase: ConnectionPhase) => {
        const status = phaseStatuses[phase];
        const time = phaseTimestamps[phase];
        const colorMap: Record<string, string> = {
            waiting: 'default',
            inprogress: 'processing',
            success: 'green',
            fail: 'red',
            cancelled: 'orange',
        };

        return (
            <div key={phase} style={{ marginBottom: 4 }}>
                <Text strong>{phase}</Text> ‚Äî <Tag color={colorMap[status] ?? 'default'}>{status}</Tag>
                {time && (
                    <Text type="secondary" style={{ marginLeft: 8 }}>
                        {new Date(time).toLocaleTimeString()}
                    </Text>
                )}
            </div>
        );
    };

    const handleFullReset = () => {
        fullReset();
        message.success('‚úÖ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω (–≤–∫–ª—é—á–∞—è persistent)');
    };

    return (
        <div style={{ padding: 24, maxWidth: 640 }}>
            <Title level={4}>üß™ Zustand Playground: useConnectionStore</Title>

            <Divider>üß≠ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</Divider>
            <Text>
                <strong>–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞:</strong> <Tag color="blue">{currentPhase}</Tag>
            </Text>
            <br />
            <Text>
                <strong>–ü–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</strong>{' '}
                <Tag color={firstTimeConnection ? 'green' : 'default'}>
                    {String(firstTimeConnection)}
                </Tag>
            </Text>
            <br />
            <Text>
                <strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</strong>{' '}
                {lastSuccessfulConnection ? (
                    <Text code>{new Date(lastSuccessfulConnection).toLocaleString()}</Text>
                ) : (
                    '‚Äî'
                )}
            </Text>

            <Divider>üìã –°—Ç–∞—Ç—É—Å—ã —Ñ–∞–∑</Divider>
            <div style={{ marginBottom: 12 }}>
                {Object.values(ConnectionPhases).map((phase) =>
                    renderPhase(phase as ConnectionPhase),
                )}
            </div>

            <Divider>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</Divider>
            <Space wrap>
                <Button type="primary" onClick={firstStart}>
                    firstStart
                </Button>
                <Button onClick={reStart}>reStart</Button>
                <Button onClick={goOn}>goOn</Button>
                <Button danger onClick={goFail}>
                    goFail
                </Button>
                <Button danger onClick={cancel}>
                    cancel
                </Button>
                <Button onClick={resetStatuses}>resetStatuses</Button>
                <Button onClick={handleFullReset} type="dashed">
                    fullReset
                </Button>
            </Space>

            <Divider>üé® –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Ñ–∞–∑</Divider>
            <div style={{ marginBottom: 12 }}>
                {Object.values(PhaseStatuses).map((status) => {
                    const colorMap: Record<string, string> = {
                        waiting: 'default',
                        inprogress: 'processing',
                        success: 'green',
                        fail: 'red',
                        cancelled: 'orange',
                    };
                    return (
                        <div key={status} style={{ marginBottom: 4 }}>
                            <Text strong>{status}</Text>{' '}
                            <Tag color={colorMap[status] ?? 'default'}>{status}</Tag>
                        </div>
                    );
                })}
            </div>
        </div>
    );
};

const meta: Meta<typeof DevConnectionStorePanel> = {
    title: 'Stores/useConnectionStore',
    component: DevConnectionStorePanel,
    parameters: {
        layout: 'centered',
        docs: { page: undefined },
    },
    decorators: [
        (Story) => {
            useEffect(() => {
                useConnectionStore.getState().fullReset();
                log.debug('Storybook: –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
            }, []);
            return <Story />;
        },
    ],
};

export default meta;

type Story = StoryObj<typeof DevConnectionStorePanel>;

export const Default: Story = {
    render: () => <DevConnectionStorePanel />,
};
